// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sdreger/lib-file-processor-go/filestore (interfaces: BookCompressor)

// Package filestore is a generated GoMock package.
package filestore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookCompressor is a mock of BookCompressor interface.
type MockBookCompressor struct {
	ctrl     *gomock.Controller
	recorder *MockBookCompressorMockRecorder
}

// MockBookCompressorMockRecorder is the mock recorder for MockBookCompressor.
type MockBookCompressorMockRecorder struct {
	mock *MockBookCompressor
}

// NewMockBookCompressor creates a new mock instance.
func NewMockBookCompressor(ctrl *gomock.Controller) *MockBookCompressor {
	mock := &MockBookCompressor{ctrl: ctrl}
	mock.recorder = &MockBookCompressorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookCompressor) EXPECT() *MockBookCompressorMockRecorder {
	return m.recorder
}

// CompressBookFiles mocks base method.
func (m *MockBookCompressor) CompressBookFiles(arg0, arg1, arg2 string) (string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompressBookFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompressBookFiles indicates an expected call of CompressBookFiles.
func (mr *MockBookCompressorMockRecorder) CompressBookFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompressBookFiles", reflect.TypeOf((*MockBookCompressor)(nil).CompressBookFiles), arg0, arg1, arg2)
}
