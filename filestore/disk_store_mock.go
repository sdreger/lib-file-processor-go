// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sdreger/lib-file-processor-go/filestore (interfaces: DiskStore)

// Package filestore is a generated GoMock package.
package filestore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	book "github.com/sdreger/lib-file-processor-go/domain/book"
)

// MockDiskStore is a mock of DiskStore interface.
type MockDiskStore struct {
	ctrl     *gomock.Controller
	recorder *MockDiskStoreMockRecorder
}

// MockDiskStoreMockRecorder is the mock recorder for MockDiskStore.
type MockDiskStoreMockRecorder struct {
	mock *MockDiskStore
}

// NewMockDiskStore creates a new mock instance.
func NewMockDiskStore(ctrl *gomock.Controller) *MockDiskStore {
	mock := &MockDiskStore{ctrl: ctrl}
	mock.recorder = &MockDiskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskStore) EXPECT() *MockDiskStoreMockRecorder {
	return m.recorder
}

// IsFolderEmpty mocks base method.
func (m *MockDiskStore) IsFolderEmpty(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFolderEmpty", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFolderEmpty indicates an expected call of IsFolderEmpty.
func (mr *MockDiskStoreMockRecorder) IsFolderEmpty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFolderEmpty", reflect.TypeOf((*MockDiskStore)(nil).IsFolderEmpty), arg0)
}

// PrepareBookFiles mocks base method.
func (m *MockDiskStore) PrepareBookFiles(arg0 book.ParsedData, arg1, arg2 string) (TempFilesData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareBookFiles", arg0, arg1, arg2)
	ret0, _ := ret[0].(TempFilesData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareBookFiles indicates an expected call of PrepareBookFiles.
func (mr *MockDiskStoreMockRecorder) PrepareBookFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareBookFiles", reflect.TypeOf((*MockDiskStore)(nil).PrepareBookFiles), arg0, arg1, arg2)
}

// StoreBookArchive mocks base method.
func (m *MockDiskStore) StoreBookArchive(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBookArchive", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBookArchive indicates an expected call of StoreBookArchive.
func (mr *MockDiskStoreMockRecorder) StoreBookArchive(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBookArchive", reflect.TypeOf((*MockDiskStore)(nil).StoreBookArchive), arg0, arg1, arg2)
}

// StoreCoverFile mocks base method.
func (m *MockDiskStore) StoreCoverFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCoverFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCoverFile indicates an expected call of StoreCoverFile.
func (mr *MockDiskStoreMockRecorder) StoreCoverFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCoverFile", reflect.TypeOf((*MockDiskStore)(nil).StoreCoverFile), arg0, arg1)
}
