// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sdreger/lib-file-processor-go/filestore (interfaces: CoverDownloader)

// Package filestore is a generated GoMock package.
package filestore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoverDownloader is a mock of CoverDownloader interface.
type MockCoverDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockCoverDownloaderMockRecorder
}

// MockCoverDownloaderMockRecorder is the mock recorder for MockCoverDownloader.
type MockCoverDownloaderMockRecorder struct {
	mock *MockCoverDownloader
}

// NewMockCoverDownloader creates a new mock instance.
func NewMockCoverDownloader(ctrl *gomock.Controller) *MockCoverDownloader {
	mock := &MockCoverDownloader{ctrl: ctrl}
	mock.recorder = &MockCoverDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoverDownloader) EXPECT() *MockCoverDownloaderMockRecorder {
	return m.recorder
}

// DownloadCoverFile mocks base method.
func (m *MockCoverDownloader) DownloadCoverFile(arg0, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadCoverFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadCoverFile indicates an expected call of DownloadCoverFile.
func (mr *MockCoverDownloaderMockRecorder) DownloadCoverFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadCoverFile", reflect.TypeOf((*MockCoverDownloader)(nil).DownloadCoverFile), arg0, arg1, arg2)
}
